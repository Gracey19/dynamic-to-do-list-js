/**
 * script.js
 * * Implements a dynamic To-Do List application using advanced DOM manipulation.
 * Allows users to add, display, and remove tasks.
 */

// Step 1: Setup Event Listener for Page Load: 'DOMContentLoaded'
document.addEventListener('DOMContentLoaded', function() {
    // Step 2: Select DOM Elements
    // Use document.getElementById to select the necessary elements and store them in constants.
    const addButton = document.getElementById('add-task-btn');
    const taskInput = document.getElementById('task-input');
    const taskList = document.getElementById('task-list');

    // Step 3: Create the addTask Function
    /**
     * Handles the logic for adding a new task to the list.
     */
    function addTask() {
        // Retrieve and trim the value from the task input field.
        let taskText = taskInput.value.trim();

        // Check if taskText is not empty.
        if (taskText === "") {
            // If empty, prompt the user to enter a task.
            alert("Please enter a task!");
            return; // Exit the function if the input is empty.
        }

        // Step 4: Task Creation and Removal (within addTask)
        
        // Create a new li element.
        const listItem = document.createElement('li');
        // Set its textContent to the trimmed task text.
        listItem.textContent = taskText;

        // Create a new button element for removing the task.
        const removeButton = document.createElement('button');
        // Set its textContent to "Remove".
        removeButton.textContent = 'Remove';
        // Give it a class name of 'remove-btn'.
        removeButton.className = 'remove-btn';

        // Assign an onclick event to the remove button.
        // When triggered, it removes the li element from the taskList.
        removeButton.onclick = function() {
            // The parent element of the remove button is the <li>, so we remove it.
            taskList.removeChild(listItem);
        };

        // Append the remove button to the li element.
        listItem.appendChild(removeButton);

        // Append the li to taskList.
        taskList.appendChild(listItem);

        // Clear the task input field.
        taskInput.value = '';
    }

    // Step 5: Attach Event Listeners

    // Add an event listener to addButton that calls addTask when clicked.
    addButton.addEventListener('click', addTask);

    // Add an event listener to taskInput for the 'keypress' event.
    // This allows tasks to be added by pressing the "Enter" key.
    taskInput.addEventListener('keypress', function(event) {
        // Check if event.key is equal to 'Enter' before calling addTask.
        if (event.key === 'Enter') {
            addTask();
        }
    });

    // Note on 'Invoke the addTask function on DOMContentLoaded.':
    // The previous instructions are followed by setting up listeners on DOMContentLoaded.
    // The explicit call to addTask is omitted as it would cause an unnecessary empty alert on load.
});

